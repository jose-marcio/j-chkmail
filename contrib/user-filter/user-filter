#! /usr/bin/perl -w

#
#  Ecole des Mines de Paris - Centre de Calcul
#  Historique :
#  16/02/2003 - Jose Marcio Martins da Cruz - Creation
#
use strict;
use IO::Socket;
use Sys::Syslog;
use Getopt::Long;

my $avirus = "";
my $port = 2002;
my $ip = "127.0.0.1";
my $help = 0;

my $debug = 0;
my $facility = "local1";

my $ok = GetOptions('p=s' => \$port,
		    's=s' => \$avirus,
		    'a=s' => \$ip,
		    'h'   => \$help,
		    'd'   => \$debug,
		    'f'   => \$facility);

if ($help || !$ok) {
  &usage();
  exit 1;
}

if (!defined($avirus) || $avirus eq "") {
  printf " Scanner type not defined... \n";
  &usage();
  exit 1;
}


#........................................................................
#
# To configure this, replace $avirus variable value below by the
# wanted virus scanner, and below, the path of scanner
#

$avirus =~ tr/a-z/A-Z/;
$avirus = "FPROT"  if $avirus eq "";

my $av_prog = "";
my $av_args = "";

if ($avirus eq "MCAFEE") {
  $ENV{LD_LIBRARY_PATH} = "/opt/uvscan";

  $av_prog = "/opt/uvscan/uvscan";
  $av_args = "--mime --secure -rv --summary --noboot";
}

if ($avirus eq "TREND") {
  $ENV{LD_LIBRARY_PATH} = "/opt/trend/ISBASE/IScan.BASE";

  $av_prog = "/etc/iscan/vscan";
  $av_args = "-za";
}

if ($avirus eq "FPROT") {
  $av_prog = "/usr/local/f-prot/f-prot";
  $av_args = "-archive";
}

#........................................................................

# server name
my $HOST = "127.0.0.1";

$HOST = $ip;

# listen port number
my $PORT = 8080;
# allowed hosts
my @HOSTS_OK = qw(1.2.3.4
		  127.0.0.1);

# log definition
my $log_facility = "local1";
my $log_opts     = 'pid,cons,ndelay,nowait';
my $log_program  = 'av-server';

#........................................................................

openlog($log_program, $log_opts, $log_facility);

log_info(sprintf ("%s starting ...", $log_program));

# #############################################################################
#
#
$SIG{CHLD} = 'IGNORE';

my ($sock, $new_sock, $buf, $pid);

$sock = new IO::Socket::INET (LocalHost => $HOST,
                              LocalPort => $PORT,
                              Proto     => 'tcp',
                              Listen    => 5,
                              Reuse     => 1,
#                             Timeout => 10
                             ) || die "Socket could not be created. Reason: $!";
log_info("$log_program hearing ...");


my $n = 1;
my $OK = "KO";

while ($new_sock = $sock->accept()) {
  die "can't fork: $!" unless defined($pid = fork());

  next if $pid > 0;

  if ($pid == 0) {
    my $remote  = $new_sock->peerhost();
    my $host_ok = check_host($remote);
    my $result = 0;
    if ($host_ok) {
      if (1) {
	$result = handle_connection($new_sock);
      } else {
        while (defined ($buf = <$new_sock>)) {
          chomp ($buf);

          log_info ("RECV : $buf") if $debug > 1;
          log_info ("FROM : $remote") if $debug > 1;

          print $new_sock "# GOT $buf\n";
          sleep (5);
        }
      }
    } else {
      print $new_sock "Connection denied !\n";
    }
    close $new_sock;
    exit $result
  }
}

close $sock;

closelog();

exit 0;

# #############################################################################
#
#
sub log_info {
  foreach (@_) {
    print "INFO : $_\n" if $debug > 1;
    syslog('info', 'INFO : %s', $_);
  }
}

# #############################################################################
#
#
sub log_error {
  foreach (@_) {
    printf "ERROR : $_\n" if $debug > 1;
    syslog('err', 'ERROR : %s', $_);
  }
}


# #############################################################################
#
#
sub check_host {
#  return 1;
  my $host = shift;
  return 0 if ! defined $host;
  log_info ("CHECK HOST : $host");
  foreach (@HOSTS_OK) {
    return 1 if $host eq $_;
  }
  log_error ("CHECK HOST : $host : refused");
  return 0;
}



# #############################################################################
#
#

# CODES
# 0          UNKNOWN
# 600        OK
# 610        ERROR
# 620        VIRUS
# 630        POLICY

sub RES_UNKNOWN { 0; }
sub RES_OK { 600; }
sub RES_ERROR { 610; }
sub RES_VIRUS { 620; }
sub RES_POLICY { 630; }

#........................................................................
my @MESSAGE = qw();

my %HEADERS = ();
my $result = RES_OK();


my $cmd = undef;
my $fname;

sub handle_connection
{
  my ($av_sock, undef) = @_;

  return RES_ERROR() if !defined($av_sock);

  @MESSAGE = qw();

  %HEADERS = ();
  $result = RES_OK();


  $cmd = undef;
  $fname = <$av_sock>;

  chomp $fname;

  ($cmd, $fname) = split(" ", $fname);

  $cmd =~ tr/a-z/A-Z/;

  if (($cmd ne "SCANFILE") && ($cmd ne "SCANMAIL"))
  {
    printf $av_sock "%d ERROR\n", RES_ERROR();
    return RES_ERROR();
  }

  if (! -f $fname)
  {
    $result = RES_ERROR();
    push @MESSAGE, "%d File '$fname' not found\n", $result;
  }

#........................................................................


  check_policy()        if $result == RES_OK() && $avirus eq "POLICY";

  check_virus_fprot()   if $result == RES_OK() && $avirus eq "FPROT";
  check_virus_mcafee()  if $result == RES_OK() && $avirus eq "MCAFEE";
  check_virus_trend()   if $result == RES_OK() && $avirus eq "TREND";
  check_virus_joe()     if $result == RES_OK() && $avirus eq "JOE";

#........................................................................
#
  printf $av_sock "%d OK\n",      $result if $result == RES_OK();
  printf $av_sock "%d VIRUS\n",   $result if $result == RES_VIRUS();
  printf $av_sock "%d POLICY\n",  $result if $result == RES_POLICY();
  printf $av_sock "%d ERROR\n",   $result if $result == RES_ERROR();
  printf $av_sock "%d UNKNOWN\n", $result if $result == RES_UNKNOWN();

  foreach (@MESSAGE)
  {
    print $av_sock $_;
  }
  printf $av_sock "%d\n", RES_OK() if $#MESSAGE >= 0;


  #........................................................................
  #

  if (0) {
    printf $av_sock "\n";
    foreach (sort keys %HEADERS) {
      printf $av_sock " -> %-25s : %s\n", $_, $HEADERS{$_};
    }
  }

  return $result;
}

#........................................................................

sub eff_blancs {
  return "" if $#_ < 0;
  $_[0] =~ s/^[ \t]+|[ \t]+$//g;
  return $_[0];
}


#........................................................................
#
# POLICY FILTERING
#
# words I don't want to find inside message ...

sub check_policy {
  my @unwanted = ("viagra", "freesex", "enlarge");

  my $line;

  open FIN, "<$fname" || die "";

  # Let's skip Unix From line ...
  if (defined($line = <FIN>)) {

  }

  my $header = 1;
  my ($nl, $nh, $nhl, $nb) = (0, 0, 0, 0);
  my ($attr, $value);

  # Let's read message
  while ($line = <FIN>) {
    chomp($line);

    $nl++;

    # First of all, header processing
    if ($header) {
      # Empty line -> end of header
      if ($line =~ /^$/) {
        $header = 0;
      } else {
        if (! ($line =~ /^[\ \t]/)) {
          ($attr, $value) = split(":", $line, 2);
          eff_blancs($attr);
          eff_blancs($value);

          $HEADERS{$attr} = $value;
          $nh++;
        } else {
          $value .= "\n" . $line;
          $HEADERS{$attr} = $value;
        }
        $nhl++;
      }
      next;
    }

    # Body processing
    $nb++;
    foreach (@unwanted) {
      if ($line =~ /$_/) {
        $result = RES_POLICY();
        push @MESSAGE, "%d  Message body contains unwanted word ($_) at line $nl\n", $result;
      }
    }
  }
  close FIN;

  return $result;
}

#........................................................................

sub check_virus_mcafee {

  my %VIRUS = ();

  my $av_cmd = "$av_prog $av_args $fname | grep Found |";

  if (! -x $av_prog) {
    $result = RES_ERROR();
    push @MESSAGE, "%d $av_prog not found\n", $result;
    return $result;
  }

  if (!open VIRUS, $av_cmd) {
    $result = RES_ERROR();
    push @MESSAGE, "%d Can't execute $av_cmd\n", $result;
    return $result;
  }

  my $nvirus = 0;

  while (<VIRUS>) {
    chomp;
    eff_blancs($_);
    next if /^$/;

    s/Found//g;
    s/ virus / /g;
    s/ variant / /g;
    s/ trojan / /g;
    s/ the / /g;
    s/ or / /g;
    s/!/ /g;
    eff_blancs($_);

    $VIRUS{$_}++;
    $nvirus++;
  }
  close VIRUS;

  if ($nvirus > 0) {
    $result = RES_VIRUS();
    foreach (reverse sort {$VIRUS{$a} <=> $VIRUS{$b}} keys %VIRUS) {
      push @MESSAGE, sprintf "%d %-24s\n", $result, $_;
    }
  }
  return $result;
}

#........................................................................

sub check_virus_trend {

  my %VIRUS = ();

  my $av_cmd = "$av_prog $av_args $fname | grep Found |";

  if (! -x $av_prog) {
    $result = RES_ERROR();
    push @MESSAGE, "%d $av_prog not found\n", $result;
    return $result;
  }

  if (!open VIRUS, $av_cmd) {
    $result = RES_ERROR();
    push @MESSAGE, "%d Can't execute $av_cmd\n", $result;
    return $result;
  }

  my $nvirus = 0;

  while (<VIRUS>) {
    chomp;
    eff_blancs($_);
    next if /^$/;

    s/Found//g;
    s/ virus / /g;
    s/ variant / /g;
    s/ trojan / /g;
    s/ the / /g;
    s/ or / /g;
    s/!/ /g;
    eff_blancs($_);

    $VIRUS{$_}++;
    $nvirus++;
  }
  close VIRUS;

  if ($nvirus > 0) {
    $result = RES_VIRUS();
    foreach (reverse sort {$VIRUS{$a} <=> $VIRUS{$b}} keys %VIRUS) {
      push @MESSAGE, sprintf "%d %-24s\n", $result, $_;
    }
  }
  return $result;
}


#........................................................................

sub check_virus_joe {
  my %VIRUS = ();

  $av_prog = "/var/jchkmail/j-msg-entropy";
  $av_args = "";
  my $av_cmd = "$av_prog $av_args $fname |";

  if (! -x $av_prog) {
    $result = RES_ERROR();
    push @MESSAGE, "%d $av_prog not found\n", $result;
    return $result;
  }

  if (!open VIRUS, $av_cmd) {
    $result = RES_ERROR();
    push @MESSAGE, "%d Can't execute $av_cmd\n", $result;
    return $result;
  }

  my $nvirus = 0;

  while (<VIRUS>) {
    chomp;
    eff_blancs($_);
    next if /^$/;

    eff_blancs($_);

    $VIRUS{$_}++;
    $nvirus++;
  }
  close VIRUS;

  if ($nvirus > 0) {
    $result = RES_VIRUS();
    foreach (reverse sort {$VIRUS{$a} <=> $VIRUS{$b}} keys %VIRUS) {
      push @MESSAGE, sprintf "%d %-24s\n", $result, $_;
    }
  }
  return $result;
}

#........................................................................

sub check_virus_fprot {

  my %VIRUS = ();

  my $av_cmd = "$av_prog $av_args $fname | grep Infect |";

  if (! -x $av_prog) {
    $result = RES_ERROR();
    push @MESSAGE, "%d $av_prog not found\n", $result;
    return $result;
  }

  if (!open VIRUS, $av_cmd) {
    $result = RES_ERROR();
    push @MESSAGE, "%d Can't execute $av_cmd\n", $result;
    return $result;
  }

  my $nvirus = 0;

  while (<VIRUS>) {
    chomp;
    eff_blancs($_);
    next if /^$/;

    next unless /Infection:/;

    my @TMP = split (" ",$_);

    while (($#TMP >= 0) && !($TMP[0] =~ "Infection")) {
      shift @TMP;
    }

    if (($#TMP >= 0) && ($TMP[0] =~ "Infection")) {
      shift @TMP;

      my $line = join (" ", @TMP);
      eff_blancs($line);

      $VIRUS{$line}++;
      $nvirus++;
    }
  }
  close VIRUS;

  if ($nvirus > 0) {
    $result = RES_VIRUS();
    foreach (reverse sort {$VIRUS{$a} <=> $VIRUS{$b}} keys %VIRUS) {
      push @MESSAGE, sprintf "%d %-24s\n", $result, $_;
    }
  }
  return $result;
}



sub usage()
{
  my @prg = split("/", $0);
  my $arg = $prg[-1];

  print <<EOT;

  usage :
    $arg [-h] [-p port] [-s server] [-d debuglevel] [-f facility] -a scanner

    -h          - Prints this message and quit
    -p  n       - Listening port
                  default : 2002
    -s server   - IP address to listen
                  default : 127.0.0.1
    -d level    - debug level : 0..
                  default : 0
    -f facility - syslog facility
                  default : local1
    -a scanner  - type of virus scanner
                  MCAFEE | TREND | FPROT
                  default : no default value
                  mandatory argument

  Copyright 2002-2004 - Ecole des Mines de Paris
  Author : Jose-Marcio.Martins\@ensmp.fr

EOT
}
